## Create DF using WBstats
gdp_pct_growth_df <- wbstats::wb_data(country = "countries_only",
indicator = "NY.GDP.PCAP.KD.ZG",
start_date = 2009,
end_date = 2019, return_wide = FALSE) %>%
dplyr::mutate(gdp_pct_growth = value/100)
### libraries
library(tidyverse)
library(officer)
library(wbstats)
library(extrafont)
extrafont::loadfonts("win")
## Create DF using WBstats
gdp_pct_growth_df <- wbstats::wb_data(country = "countries_only",
indicator = "NY.GDP.PCAP.KD.ZG",
start_date = 2009,
end_date = 2019, return_wide = FALSE) %>%
dplyr::mutate(gdp_pct_growth = value/100)
gdp_pct_growth_df
wbindicators
wbindicators()
indicators <- wbindicators()
View(indicators)
wbsearch("GDP")
wb_search("GDP")
View( wb_search("GDP"))
country_list <- unique(gdp_pct_growth_df$country)
country_list
## Create DF using WBstats
gdp_pct_growth_df <- wbstats::wb_data(country = "countries_only",
indicator = "NY.GDP.PCAP.KD.ZG",
start_date = 2009,
end_date = 2019, return_wide = FALSE) %>%
dplyr::mutate(gdp_pct_growth = value/100)
### libraries
library(tidyverse)
library(officer)
library(wbstats)
library(extrafont)
extrafont::loadfonts("win")
## Create DF using WBstats
gdp_pct_growth_df <- wbstats::wb_data(country = "countries_only",
indicator = "NY.GDP.PCAP.KD.ZG",
start_date = 2009,
end_date = 2019, return_wide = FALSE) %>%
dplyr::mutate(gdp_pct_growth = value/100)
gdp_pct_growth_df
gdp_pct_growth_df %>%
group_by(country) %>%
count()
View(gdp_pct_growth_df %>%
group_by(country) %>%
count())
filter(gdp_pct_growth_coverage, country == "Somalia
")
filter(gdp_pct_growth_df, country == "Somalia
")
filter(gdp_pct_growth_df, country == "Somalia")
gdp_pct_growth_coverage <- gdp_pct_growth_df %>%
filter(!is.na(gdp_ct_growth)) %>%
group_by(country) %>%
count()
gdp_pct_growth_coverage <- gdp_pct_growth_df %>%
filter(!is.na(gdp_ct_growth)) %>%
group_by(country) %>%
count()
gdp_pct_growth_coverage <- gdp_pct_growth_df %>%
filter(!is.na(gdp_ct_growth)) %>%
group_by(country) %>%
count()
gdp_pct_growth_df %>%
filter(!is.na(gdp_pct_growth))
gdp_pct_growth_coverage <- gdp_pct_growth_df %>%
filter(!is.na(gdp_pct_growth)) %>%
group_by(country) %>%
count()
gdp_pct_growth_coverage
View(gdp_pct_growth_coverage)
knitr::kable(gdp_pct_growth_df)
gdp_pct_growth_df
arrange(gdp_pct_growth_df, desc(country, year))
arrange(gdp_pct_growth_df, desc(country))
arrange(gdp_pct_growth_df, country)
arrange(gdp_pct_growth_df, country, year)
arrange(gdp_pct_growth_df, country, value)
arrange(gdp_pct_growth_df, country, year)
arrange(gdp_pct_growth_df, country, year )
arrange(gdp_pct_growth_df, country, date) %>% filter (date %in% 2009)
arrange(gdp_pct_growth_df, country, date) %>% filter (date %in% 2019)
arrange(gdp_pct_growth_df, country, date) %>% filter (date %in% 2019) %>% select(indicator_id, indicator, country, value, gdp_pct_growth_coverage)
arrange(gdp_pct_growth_df, country, date) %>% filter (date %in% 2019) %>% select(indicator_id, indicator, country, value, gdp_pct_growth)
arrange(gdp_pct_growth_df, country, date) %>% filter (date %in% 2019) %>% select(indicator_id, indicator, country, date, value, gdp_pct_growth)
arrange(gdp_pct_growth_df, country, date) %>% filter (date %in% 2019) %>% select(indicator_id, indicator, country, date, value, gdp_pct_growth) %>%
slice(n = 5)
?slice
arrange(gdp_pct_growth_df, country, date) %>% filter (date %in% 2019) %>% select(indicator_id, indicator, country, date, value, gdp_pct_growth) %>%
slice_head()
arrange(gdp_pct_growth_df, country, date) %>% filter (date %in% 2019) %>% select(indicator_id, indicator, country, date, value, gdp_pct_growth) %>%
slice(1:5)
arrange(gdp_pct_growth_df, country, date) %>%
filter(date %in% 2019) %>%
select(indicator_id, indicator, country, date, value, gdp_pct_growth) %>%
slice(1:5)
example_df <- arrange(gdp_pct_growth_df, country, date) %>%
filter(date %in% 2019) %>%
select(indicator_id, indicator, country, date, value, gdp_pct_growth) %>%
slice(1:5)
??kable
?kable()
knitr::kable(example_df, format = "html")
## Create DF using WBstats
gdp_pct_growth_df <- wbstats::wb_data(country = "countries_only",
indicator = "NY.GDP.PCAP.KD.ZG",
start_date = 2009,
end_date = 2019, return_wide = FALSE) %>%
dplyr::mutate(gdp_pct_growth = value/100)
### libraries
library(tidyverse)
library(officer)
library(wbstats)
library(extrafont)
extrafont::loadfonts("win")
## Create DF using WBstats
gdp_pct_growth_df <- wbstats::wb_data(country = "countries_only",
indicator = "NY.GDP.PCAP.KD.ZG",
start_date = 2009,
end_date = 2019, return_wide = FALSE) %>%
dplyr::mutate(gdp_pct_growth = value/100)
df <- filter(gdp_pct_growth_df, country == country_list[2])
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 2) +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
#ggtitle(paste0(names(variable_list[i])))+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0(country_list[2], ", ", "2009-2019"))+
theme_minimal()+
theme(text = element_text(size=12),
legend.title=element_blank(),
legend.text =  element_text(size = rel(.7)),
legend.key.width = unit(.5,  unit = "cm"),
legend.spacing.x = unit(0, unit = "cm"),
legend.box.margin=margin(-12,-12,-12,-12),
axis.title.x= element_blank(),
axis.text.x = element_text(size = rel(1), angle = 0, hjust = .5),
axis.title.y= element_text(size = rel(.9), angle = 90, hjust = .5),
axis.text.y = element_text(),
plot.title = element_text(size = rel(.9), face = "bold", hjust = 0, margin = margin(0,0,5,0)),
plot.subtitle = element_text(size = rel(.9), face = "plain", hjust = 0, margin = margin(0,0,5,0)),
plot.caption = element_text(size = rel(0.5), face = "italic", hjust = 1, vjust = 1, margin = margin(12,0,0,0)),
panel.grid.major = element_line(size = .50),
panel.grid.minor = element_line(size = .25),
panel.grid = element_line(colour = "grey70"))
df <- filter(gdp_pct_growth_df, country == country_list[2])
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 2) +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
#ggtitle(paste0(names(variable_list[i])))+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0(country_list[2], ", ", "2009-2019"))+
theme_minimal()+
theme(text = element_text(size=12),
legend.title=element_blank(),
legend.text =  element_text(size = rel(.7)),
legend.key.width = unit(.5,  unit = "cm"),
legend.spacing.x = unit(0, unit = "cm"),
legend.box.margin=margin(-12,-12,-12,-12),
axis.title.x= element_blank(),
axis.text.x = element_text(size = rel(1), angle = 0, hjust = .5),
axis.title.y= element_text(size = rel(.9), angle = 90, hjust = .5),
axis.text.y = element_text(),
plot.title = element_text(size = rel(.9), face = "bold", hjust = 0, margin = margin(0,0,5,0)),
plot.subtitle = element_text(size = rel(.9), face = "plain", hjust = 0, margin = margin(0,0,5,0)),
plot.caption = element_text(size = rel(0.5), face = "italic", hjust = 1, vjust = 1, margin = margin(12,0,0,0)),
panel.grid.major = element_line(size = .50),
panel.grid.minor = element_line(size = .25),
panel.grid = element_line(colour = "grey70"))
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 2)
df <- filter(gdp_pct_growth_df, country == country_list[2])
country_list <- unique(gdp_pct_growth_df$country)
df <- filter(gdp_pct_growth_df, country == country_list[2])
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 2)
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 2) +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
#ggtitle(paste0(names(variable_list[i])))+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0(country_list[2], ", ", "2009-2019"))+
theme_minimal()
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 2) +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0(country_list[2], ", ", "2009-2019"))+
theme_minimal()
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 2) +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0(country_list[2], ", ", "2009-2019"))+
theme_minimal()
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 2) +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0(country_list[2], ", ", "2009-2019"))+
theme_minimal()
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 2) +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0(country_list[2], ", ", "2009-2019"))+
theme_minimal()+
theme(axis.title.x= element_blank())
df <- filter(gdp_pct_growth_df, country == "Ireland")
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 2) +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0(country_list[2], ", ", "2009-2019"))+
theme_minimal()+
theme(axis.title.x= element_blank())
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 2) +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0("Ireland", ", ", "2009-2019"))+
theme_minimal()+
theme(axis.title.x= element_blank())
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 2) +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0("Ireland", ", ", "2009-2019"))+
theme_minimal()+
theme(axis.title.x= element_blank())
## create simple graph
df <- filter(gdp_pct_growth_df, country == "Ireland")
df
df <- filter(gdp_pct_growth_df, country == "France")
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 2) +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0("Ireland", ", ", "2009-2019"))+
theme_minimal()+
theme(axis.title.x= element_blank())
## create simple graph
df <- filter(gdp_pct_growth_df, country == "France")
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 2) +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0("France", ", ", "2009-2019"))+
theme_minimal()+
theme(axis.title.x= element_blank())
filter(gdp_pct_growth_df, country == "France")
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 2) +
geom_hline(yintercept=0, linetype="dashed",  color = "red", size=2)  +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0("France", ", ", "2009-2019"))+
theme_minimal()+
theme(axis.title.x= element_blank())
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 2) +
geom_hline(yintercept=0, linetype="dashed",  color = "red", size=1)  +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0("France", ", ", "2009-2019"))+
theme_minimal()+
theme(axis.title.x= element_blank())
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 3) +
geom_hline(yintercept=0, linetype="dashed",  color = "red", size=1)  +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0("France", ", ", "2009-2019"))+
theme_minimal()+
theme(axis.title.x= element_blank())
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 3) +
geom_hline(yintercept=0, linetype="dashed",  color = "red", size=1)  +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = "France, 2009-2019")+
theme_minimal()+
theme(axis.title.x= element_blank())
### Create a df with only data for France
df <- filter(gdp_pct_growth_df, country == "France")
### Create a simple line chart showing trends from 2009-2019
### geom_hline marks 0% growth for reading ease
### axis.title.x= element_blank() removes the x-axis (Year) title label
### axis.text.x = angle = 90 rotates the axis x text
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 3) +
geom_hline(yintercept=0, linetype="dashed",  color = "red", size=1)  +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = "France, 2009-2019",
caption = "Source: World Bank Open Data")+
theme_minimal()+
theme(axis.title.x= element_blank(),
axis.text.x = element_text(angle = 90))
### Create df using wbstats
### create new variable so that that gdp_pct_growth is formatted as %
library(tidyverse)
library(wbstats)
gdp_pct_growth_df <- wbstats::wb_data(country = "countries_only",
indicator = "NY.GDP.PCAP.KD.ZG",
start_date = 2009,
end_date = 2019,
return_wide = FALSE) %>%
dplyr::mutate(gdp_pct_growth = value/100)
### Create a df with only data for France
df <- filter(gdp_pct_growth_df, country == "France")
### Create a simple line chart showing trends from 2009-2019
### geom_hline marks 0% growth for reading ease
### axis.title.x= element_blank() removes the x-axis (Year) title label
### axis.text.x = angle = 90 rotates the axis x text
ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 3) +
geom_hline(yintercept=0, linetype="dashed",  color = "red", size=1)  +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = "France, 2009-2019",
caption = "Source: World Bank Open Data")+
theme_minimal()+
theme(axis.title.x= element_blank(),
axis.text.x = element_text(angle = 90))
for( i in seq_along(country_list)) {
### For each iteration, create a df for only that country
df <- filter(gdp_pct_growth_df, country == country_list[i])
### For each iteration, create a plot
### Use paste0(counter_list[i]), to change labels when needed
plot <- ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 3) +
geom_hline(yintercept=0, linetype="dashed",  color = "red", size=1)  +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0(country_list[i], ", ", "2009-2019"),
caption = "Source: World Bank Open Data")+
theme_minimal()+
theme(axis.title.x= element_blank(),
axis.text.x = element_text(angle = 90))
### Store file path
### str_replace_all replaces countries names so that it is alpha numeric to avoid invalid file path issues.
plot_file_path <- paste0(getwd(),"/graphs/", str_replace_all(country_list[i], "[^[:alnum:]]","_"), ".png")
### Append filepath to list for each iteration
file_path_list <- append(file_path_list, list(graph_file_path))
{ggsave(filename= plot_file_path, plot=plot, width = 7, height = 5, units = "in", scale = 1, dpi = 300)}
}
### Make a list of all unique countries
country_list <- unique(gdp_pct_growth_df$country)
file_path_list <- list()
getwd()
### Make a list of all unique countries
country_list <- unique(gdp_pct_growth_df$country)
file_path_list <- list()
for( i in seq_along(country_list)) {
### For each iteration, create a df for only that country
df <- filter(gdp_pct_growth_df, country == country_list[i])
### For each iteration, create a plot
### Use paste0(counter_list[i]), to change labels when needed
plot <- ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 3) +
geom_hline(yintercept=0, linetype="dashed",  color = "red", size=1)  +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0(country_list[i], ", ", "2009-2019"),
caption = "Source: World Bank Open Data")+
theme_minimal()+
theme(axis.title.x= element_blank(),
axis.text.x = element_text(angle = 90))
### Store file path
### str_replace_all replaces countries names so that it is alpha numeric to avoid invalid file path issues.
plot_file_path <- paste0(getwd(),"/graphs/", str_replace_all(country_list[i], "[^[:alnum:]]","_"), ".png")
### Append filepath to list for each iteration
file_path_list <- append(file_path_list, list(graph_file_path))
{ggsave(filename= plot_file_path, plot=plot, width = 7, height = 5, units = "in", scale = 1, dpi = 300)}
}
paste0(getwd(),"/graphs/", str_replace_all(country_list[1], "[^[:alnum:]]","_"), ".png")
### Make a list of all unique countries
country_list <- unique(gdp_pct_growth_df$country)
file_path_list <- list()
for( i in seq_along(country_list)) {
### For each iteration, create a df for only that country
df <- filter(gdp_pct_growth_df, country == country_list[i])
### For each iteration, create a plot
### Use paste0(counter_list[i]), to change labels when needed
plot <- ggplot(df, aes(x=date, y=gdp_pct_growth)) +
geom_line(size = 1)+
geom_point(size = 3) +
geom_hline(yintercept=0, linetype="dashed",  color = "red", size=1)  +
scale_x_continuous("Year", breaks = seq(2009,2019, 1), limits = c(2009, 2019))+
scale_y_continuous("GDP per capita growth (annual %)", labels = scales::percent)+
labs(title = "GDP per capita growth (annual %)",
subtitle = paste0(country_list[i], ", ", "2009-2019"),
caption = "Source: World Bank Open Data")+
theme_minimal()+
theme(axis.title.x= element_blank(),
axis.text.x = element_text(angle = 90))
### Store file path
### str_replace_all replaces countries names so that it is alpha numeric to avoid invalid file path issues.
plot_file_path <- paste0(getwd(),"/graphs/", str_replace_all(country_list[i], "[^[:alnum:]]","_"), ".png")
### Append filepath to list for each iteration
file_path_list <- append(file_path_list, list(plot_file_path))
{ggsave(filename= plot_file_path, plot=plot, width = 7, height = 5, units = "in", scale = 1, dpi = 300)}
}
blank_ppt <- read_pptx("template.pptx")
for (u in seq(file_path)){
gdp_growth_ppt <- add_slide(blank_ppt,
layout = "Graph",
master = "Retrospect") %>%
ph_with(value = external_img(file_path[[u]]),
location = ph_location_type(type = "body"))}
gdp_growth_ppt %>%
print(target = "gdp_per_capita_%_growth_slide_deck.pptx") %>%
invisible()
file_path_lsit
file_path_lsit
file_path_list
for (u in seq(file_path_list)){
gdp_growth_ppt <- add_slide(blank_ppt,
layout = "Graph",
master = "Retrospect") %>%
ph_with(value = external_img(file_path_list[[u]]),
location = ph_location_type(type = "body"))}
gdp_growth_ppt %>%
print(target = "gdp_per_capita_%_growth_slide_deck.pptx") %>%
invisible()
library(officer)
blank_ppt <- read_pptx("template.pptx")
for (u in seq(file_path_list)){
gdp_growth_ppt <- add_slide(blank_ppt,
layout = "Graph",
master = "Retrospect") %>%
ph_with(value = external_img(file_path_list[[u]]),
location = ph_location_type(type = "body"))}
gdp_growth_ppt %>%
print(target = "gdp_per_capita_%_growth_slide_deck.pptx") %>%
invisible()
?invisible()
gdp_growth_ppt %>%
print(target = "gdp_per_capita_%_growth_slide_deck.pptx")
